{"ast":null,"code":"export default {\n  name: 'ImageEditor',\n  props: {\n    image: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      drawing: false,\n      context: null,\n      brush_size: 5,\n      brush_colour: '#FF0000',\n      colour_palette: ['#000000', '#FFFFFF', '#FF0000', '#00FF00', '#0000FF']\n    };\n  },\n  mounted() {\n    this.context = this.$refs.canvas.getContext('2d');\n    this.loadImage();\n  },\n  methods: {\n    loadImage() {\n      this.context.drawImage(this.image.data, 10, 10);\n    },\n    startDrawing(event) {\n      this.drawing = true;\n      this.context.beginPath();\n      this.context.moveTo(event.clientX - this.$refs.canvas.getBoundingClientRect().left, event.clientY - this.$refs.canvas.getBoundingClientRect().top);\n    },\n    draw(event) {\n      if (!this.drawing) return;\n      this.context.lineTo(event.clientX - this.$refs.canvas.getBoundingClientRect().left, event.clientY - this.$refs.canvas.getBoundingClientRect().top);\n      this.context.stroke();\n    },\n    stopDrawing() {\n      this.drawing = false;\n    }\n  }\n};","map":{"version":3,"names":["name","props","image","type","Object","required","data","drawing","context","brush_size","brush_colour","colour_palette","mounted","$refs","canvas","getContext","loadImage","methods","drawImage","startDrawing","event","beginPath","moveTo","clientX","getBoundingClientRect","left","clientY","top","draw","lineTo","stroke","stopDrawing"],"sources":["src/components/ImageEditor.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <canvas ref=\"canvas\" @mousedown=\"startDrawing\" @mousemove=\"draw\" @mouseup=\"stopDrawing\"></canvas>\r\n    <div class=\"ui-container\">\r\n      <div class=\"ui-item\">\r\n        <label for=\"brush-size\">Brush size:</label>\r\n        <input type=\"number\" id=\"brush-size\" v-model.number=\"brush_size\" min=\"1\" max=\"100\">\r\n      </div>\r\n      <div class=\"ui-item palette\">\r\n        <div v-for=\"colour in colour_palette\" :key=\"colour\" class=\"palette-item\" :style=\"{ 'background-color': colour }\" @click=\"brush_colour = colour\"></div>\r\n      </div>\r\n    </div>\r\n    <div class=\"palette\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ImageEditor',\r\n  props: {\r\n    image: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      drawing: false,\r\n      context: null,\r\n      brush_size: 5,\r\n      brush_colour: '#FF0000',\r\n      colour_palette: [\r\n        '#000000',\r\n        '#FFFFFF',\r\n        '#FF0000',\r\n        '#00FF00',\r\n        '#0000FF',\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.context = this.$refs.canvas.getContext('2d');\r\n    this.loadImage();\r\n  },\r\n  methods: {\r\n    loadImage() {\r\n      this.context.drawImage(this.image.data, 10, 10);\r\n    },\r\n    startDrawing(event) {\r\n      this.drawing = true;\r\n      this.context.beginPath();\r\n      this.context.moveTo(event.clientX - this.$refs.canvas.getBoundingClientRect().left, event.clientY - this.$refs.canvas.getBoundingClientRect().top);\r\n    },\r\n    draw(event) {\r\n      if (!this.drawing) return;\r\n\r\n      this.context.lineTo(event.clientX - this.$refs.canvas.getBoundingClientRect().left, event.clientY - this.$refs.canvas.getBoundingClientRect().top);\r\n      this.context.stroke();\r\n    },\r\n    stopDrawing() {\r\n      this.drawing = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  border: 1px solid #000;\r\n  margin: 0 auto;\r\n  display: block;\r\n  width: 70%;\r\n  height: 70%;\r\n}\r\n\r\n.ui-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-content: center;\r\n  max-width: 200px;\r\n  margin: 10px auto 0;\r\n}\r\n\r\n.ui-item {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.palette {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n  max-width: 200px;\r\n  gap: 12px;\r\n}\r\n\r\n.palette-item {\r\n  width: 20px;\r\n  height: 20px;\r\n  border: 1px solid #000;\r\n  border-radius: 50%;\r\n}\r\n</style>"],"mappings":"AAkBA;EACAA,IAAA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,UAAA;MACAC,YAAA;MACAC,cAAA,GACA,WACA,WACA,WACA,WACA;IAEA;EACA;EACAC,QAAA;IACA,KAAAJ,OAAA,QAAAK,KAAA,CAAAC,MAAA,CAAAC,UAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAD,UAAA;MACA,KAAAR,OAAA,CAAAU,SAAA,MAAAhB,KAAA,CAAAI,IAAA;IACA;IACAa,aAAAC,KAAA;MACA,KAAAb,OAAA;MACA,KAAAC,OAAA,CAAAa,SAAA;MACA,KAAAb,OAAA,CAAAc,MAAA,CAAAF,KAAA,CAAAG,OAAA,QAAAV,KAAA,CAAAC,MAAA,CAAAU,qBAAA,GAAAC,IAAA,EAAAL,KAAA,CAAAM,OAAA,QAAAb,KAAA,CAAAC,MAAA,CAAAU,qBAAA,GAAAG,GAAA;IACA;IACAC,KAAAR,KAAA;MACA,UAAAb,OAAA;MAEA,KAAAC,OAAA,CAAAqB,MAAA,CAAAT,KAAA,CAAAG,OAAA,QAAAV,KAAA,CAAAC,MAAA,CAAAU,qBAAA,GAAAC,IAAA,EAAAL,KAAA,CAAAM,OAAA,QAAAb,KAAA,CAAAC,MAAA,CAAAU,qBAAA,GAAAG,GAAA;MACA,KAAAnB,OAAA,CAAAsB,MAAA;IACA;IACAC,YAAA;MACA,KAAAxB,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}