{"ast":null,"code":"export default {\n  name: 'ImageEditor',\n  components: {},\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      isDrawing: false,\n      brush_colour: null,\n      direction: true,\n      colour_palette: ['#FF0000', '#0000FF', '#000']\n    };\n  },\n  mounted() {\n    this.brush_colour = this.colour_palette[0];\n    this.canvas = this.$refs.canvas;\n    this.ctx = this.canvas.getContext('2d');\n    const image = new Image();\n    image.src = '/demo_image.png';\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.lineWidth = 20;\n    image.onload = () => {\n      this.ctx.drawImage(image, 0, 0, this.canvas.width, this.canvas.height);\n    };\n  },\n  watch: {\n    brush_colour() {\n      this.ctx.strokeStyle = this.brush_colour;\n    },\n    canvas() {\n      this.updateCanvas();\n    }\n  },\n  methods: {\n    updateCanvas() {\n      let lastTime = 0;\n      const vendors = ['webkit', 'moz'];\n      for (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n      }\n      if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function (callback) {\n          const currTime = new Date().getTime();\n          const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n          const id = window.setTimeout(function () {\n            callback(currTime + timeToCall);\n          }, timeToCall);\n          lastTime = currTime + timeToCall;\n          return id;\n        };\n      }\n      if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function (id) {\n          clearTimeout(id);\n        };\n      }\n    },\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      if (this.image) {\n        this.ctx.drawImage(this.image, 0, 0, this.canvas.width, this.canvas.height);\n      }\n    },\n    startDrawing(e) {\n      this.isDrawing = true;\n      this.ctx.beginPath();\n      this.ctx.moveTo(e.offsetX, e.offsetY);\n    },\n    draw(e) {\n      if (!this.isDrawing) return;\n      this.ctx.strokeStyle = `hsl(${this.hue}, 100%, 50%)`;\n      this.ctx.beginPath();\n      // account for canvas size (70% of parent)\n      const x = e.offsetX / 0.7;\n      const y = e.offsetY / 0.7;\n      this.ctx.moveTo(x, y);\n      this.ctx.lineTo(x, y);\n      this.ctx.stroke();\n    },\n    stopDrawing() {\n      this.isDrawing = false;\n    },\n    selectBrushColour(e) {\n      this.brush_colour = e.target.style.backgroundColor;\n      this.ctx.strokeStyle = this.brush_colour;\n    },\n    palette_style(colour) {\n      return {\n        backgroundColor: colour,\n        border: this.brush_colour === colour ? 'solid 2px #000' : 'none'\n      };\n    },\n    saveImage() {\n      const data = this.canvas.toDataURL('image/png');\n      const a = document.createElement('a');\n      a.href = data;\n      a.download = 'image.png';\n      a.click();\n    }\n  }\n};","map":{"version":3,"names":["name","components","data","canvas","ctx","isDrawing","brush_colour","direction","colour_palette","mounted","$refs","getContext","image","Image","src","width","window","innerWidth","height","innerHeight","lineJoin","lineCap","lineWidth","onload","drawImage","watch","strokeStyle","updateCanvas","methods","lastTime","vendors","x","length","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","clearCanvas","clearRect","startDrawing","e","beginPath","moveTo","offsetX","offsetY","draw","hue","y","lineTo","stroke","stopDrawing","selectBrushColour","target","style","backgroundColor","palette_style","colour","border","saveImage","toDataURL","a","document","createElement","href","download","click"],"sources":["src/components/ImageEditor.vue"],"sourcesContent":["<template>\n  <div id=\"image-editor\">\n    <h1>Image Editor</h1>\n    <canvas ref=\"canvas\" @mousedown=\"startDrawing\" @mouseup=\"stopDrawing\" @mousemove=\"draw\" @mouseleave=\"stopDrawing\"></canvas>\n    <div class=\"controls\">\n      <div class=\"palette\">\n        <div v-for=\"colour in colour_palette\" :key=\"colour\" :style=\"palette_style(colour)\" @click=\"selectBrushColour\"></div>\n      </div>\n      <div class=\"export-btn\">\n        <button @click=\"saveImage\">Save</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ImageEditor',\n  components: {},\n  data() {\n    return {\n      canvas: null,\n      ctx: null,\n      isDrawing: false,\n      brush_colour: null,\n      direction: true,\n      \n      colour_palette: [\n          '#FF0000',\n          '#0000FF',\n          '#000',\n      ]\n    }\n  },\n  mounted() {\n    this.brush_colour = this.colour_palette[0]\n    this.canvas = this.$refs.canvas\n    this.ctx = this.canvas.getContext('2d')\n    const image = new Image()\n    image.src = '/demo_image.png'\n    this.canvas.width = window.innerWidth\n    this.canvas.height = window.innerHeight\n    this.ctx.lineJoin = 'round'\n    this.ctx.lineCap = 'round'\n    this.ctx.lineWidth = 20\n    image.onload = () => {\n      this.ctx.drawImage(image, 0, 0, this.canvas.width, this.canvas.height)\n    }\n  },\n  watch: {\n    brush_colour() {\n      this.ctx.strokeStyle = this.brush_colour\n    },\n    canvas() {\n      this.updateCanvas();\n    },\n  },\n  methods: {\n    updateCanvas() {\n      let lastTime = 0;\n      const vendors = ['webkit', 'moz'];\n      for(let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n        window.cancelAnimationFrame =\n            window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];\n      }\n\n      if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function (callback) {\n          const currTime = new Date().getTime();\n          const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n          const id = window.setTimeout(function () {\n                callback(currTime + timeToCall);\n              },\n              timeToCall);\n          lastTime = currTime + timeToCall;\n          return id;\n        };\n      }\n      if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function (id) {\n          clearTimeout(id);\n        };\n      }\n    },\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      if (this.image) {\n        this.ctx.drawImage(this.image, 0, 0, this.canvas.width, this.canvas.height)\n      }\n    },\n    startDrawing(e) {\n      this.isDrawing = true\n      this.ctx.beginPath()\n      this.ctx.moveTo(e.offsetX, e.offsetY)\n    },\n    draw(e) {\n      if (!this.isDrawing) return\n      this.ctx.strokeStyle = `hsl(${this.hue}, 100%, 50%)`\n      this.ctx.beginPath()\n      // account for canvas size (70% of parent)\n      const x = e.offsetX / 0.7\n      const y = e.offsetY / 0.7\n      this.ctx.moveTo(x, y)\n      this.ctx.lineTo(x, y)\n      this.ctx.stroke()\n    },\n    stopDrawing() {\n      this.isDrawing = false\n    },\n    selectBrushColour(e) {\n      this.brush_colour = e.target.style.backgroundColor\n      this.ctx.strokeStyle = this.brush_colour\n    },\n    palette_style(colour) {\n      return {\n        backgroundColor: colour,\n        border: this.brush_colour === colour ? 'solid 2px #000' : 'none',\n      }\n    },\n    saveImage() {\n      const data = this.canvas.toDataURL('image/png')\n      const a = document.createElement('a')\n      a.href = data\n      a.download = 'image.png'\n      a.click()\n    },\n  },\n}\n</script>\n\n<style scoped>\n#image-editor {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\ncanvas {\n  background: #fff;\n  display: block;\n  margin: 0 auto;\n  border: solid 1px #000;\n  width: 70%;\n  height: 70%;\n}\n\n.controls {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.palette {\n  display: flex;\n  justify-content: space-between;\n  width: 200px;\n  height: 50px;\n  border: solid 1px #000;\n}\n\n.palette div {\n  width: 30px;\n  height: 30px;\n  margin: 10px;\n  cursor: pointer;\n}\n\n.export-btn {\n  width: 100px;\n  height: 50px;\n  margin-left: 20px;\n}\n\n.export-btn button {\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  color: white;\n  background-color: #2c3e50;\n  font-size: 14px;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}